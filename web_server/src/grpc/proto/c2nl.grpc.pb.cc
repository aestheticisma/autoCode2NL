// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: c2nl.proto

#include "c2nl.pb.h"
#include "c2nl.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* Code2NL_method_names[] = {
  "/Code2NL/summarize",
};

std::unique_ptr< Code2NL::Stub> Code2NL::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Code2NL::Stub> stub(new Code2NL::Stub(channel, options));
  return stub;
}

Code2NL::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_summarize_(Code2NL_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Code2NL::Stub::summarize(::grpc::ClientContext* context, const ::Code& request, ::Summary* response) {
  return ::grpc::internal::BlockingUnaryCall< ::Code, ::Summary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_summarize_, context, request, response);
}

void Code2NL::Stub::async::summarize(::grpc::ClientContext* context, const ::Code* request, ::Summary* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::Code, ::Summary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_summarize_, context, request, response, std::move(f));
}

void Code2NL::Stub::async::summarize(::grpc::ClientContext* context, const ::Code* request, ::Summary* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_summarize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::Summary>* Code2NL::Stub::PrepareAsyncsummarizeRaw(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::Summary, ::Code, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_summarize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::Summary>* Code2NL::Stub::AsyncsummarizeRaw(::grpc::ClientContext* context, const ::Code& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncsummarizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

Code2NL::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Code2NL_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Code2NL::Service, ::Code, ::Summary, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Code2NL::Service* service,
             ::grpc::ServerContext* ctx,
             const ::Code* req,
             ::Summary* resp) {
               return service->summarize(ctx, req, resp);
             }, this)));
}

Code2NL::Service::~Service() {
}

::grpc::Status Code2NL::Service::summarize(::grpc::ServerContext* context, const ::Code* request, ::Summary* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


